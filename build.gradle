plugins {
    id 'java'
    id 'org.springframework.boot' version '3.0.1'
    id 'io.spring.dependency-management' version '1.1.0'
}

group = 'com.habin'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '17'

configurations {
    developmentOnly
    runtimeClasspath {
        extendsFrom developmentOnly
    }
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

def generated = "src/main/generated"

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.0.2'
    implementation 'com.fasterxml.jackson.datatype:jackson-datatype-hibernate5:2.14.1'
    implementation 'com.fasterxml.jackson.datatype:jackson-datatype-jsr310'
    implementation 'com.fasterxml.jackson.datatype:jackson-datatype-jdk8'
    implementation 'org.mapstruct:mapstruct:1.5.3.Final'
    implementation 'org.mapstruct:mapstruct-processor:1.5.3.Final'
    implementation 'com.querydsl:querydsl-jpa:5.0.0:jakarta'
    implementation 'com.navercorp.fixturemonkey:fixture-monkey:0.4.10'
    compileOnly 'org.projectlombok:lombok'
    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    runtimeOnly 'org.mariadb.jdbc:mariadb-java-client'
    annotationProcessor (
            "org.springframework.boot:spring-boot-configuration-processor",
            'org.mapstruct:mapstruct-processor:1.5.3.Final',
            "org.projectlombok:lombok-mapstruct-binding:0.2.0",
            "org.projectlombok:lombok",
            "com.querydsl:querydsl-apt:5.0.0:jakarta",
            "jakarta.persistence:jakarta.persistence-api",
            "jakarta.annotation:jakarta.annotation-api"
    )
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.security:spring-security-test'
}

tasks.named('test') {
    useJUnitPlatform()
}

tasks.withType(JavaCompile).configureEach {
    options.annotationProcessorGeneratedSourcesDirectory(file(generated))
}

tasks.named('test') {
    useJUnitPlatform()
}
